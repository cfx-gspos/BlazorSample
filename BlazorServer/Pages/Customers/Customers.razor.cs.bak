using BlazorServer.Services;
using EmployeeManagement.Models;
using Microsoft.AspNetCore.Components;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;
using AntDesign;
using System.Text.Json;
using Microsoft.AspNetCore.Components.Forms;

namespace BlazorServer.Pages.Customers
{

    public partial class Customers : ComponentBase
    {



        protected Customer EditCustomer = new Customer { };

        [Required]
        public string TESTNAME { get; set; }
        public bool TestVisible { get; set; } = false;
        protected bool editModalVisible { get; set; } = false;

        [Inject]
        private ICustomerService CustomerService { get; set; }
        [Inject]
        private MessageService MessageService { get; set; }

        IEnumerable<Customer> CustomerList { get; set; } = new List<Customer>();
        protected async override Task OnInitializedAsync()
        {
            //CustomerList = await CustomerService.GetCustomers();

            StateHasChanged();
        }

        async void BindCustomer(string id)
        {
            if (id != null)
            {
                var tmpEditCustomer = await CustomerService.GetCustomer(id);
                tmpEditCustomer.CopyProperties(EditCustomer);
            }
            else
            {
                var tmpEditCustomer = new Customer { ID = null };
                tmpEditCustomer.CustomerHistories = new List<CustomerHistory>();
                tmpEditCustomer.CopyProperties(EditCustomer);
            }
            StateHasChanged();
        }

        void AddYearlyManday()
        {
            EditCustomer.CustomerHistories.Add(new CustomerHistory { ID = Guid.NewGuid().ToString(), CustomerID = EditCustomer.ID });
        }

        void DeleteYearlyManday(string id)
        {
            EditCustomer.CustomerHistories.Remove(EditCustomer.CustomerHistories.FirstOrDefault(x => x.ID == id));
        }

        async void SaveCustomer()
        {
            var result = await CustomerService.SaveCustomer(EditCustomer);
            CustomerList = await CustomerService.GetCustomers();
            editModalVisible = false;
            MessageService.Success("Save customer successfully!");
            StateHasChanged();
        }

        async void DeleteCustomer(string id)
        {
            var resut = await CustomerService.DeleteCustomer(id);
            if (resut)
            {
                CustomerList = await CustomerService.GetCustomers();
                StateHasChanged();
            }
        }
    }
}
